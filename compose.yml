services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_LOCAL_PORT}:${FRONTEND_CONTAINER_PORT}"
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules
        - action: rebuild
          path: ./frontend/package.json
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - service-network
    command: sh -c "npm run dev"
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    command: sh -c "php artisan migrate && apache2-foreground"
    develop:
      watch: 
        - action: sync
          path: ./backend
          target: /var/www/html
          ignore:
            - vendor
        - action: rebuild
          path: ./backend/composer.json
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${BACKEND_URL} || exit 1"]      
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - service-network
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -h ${DB_CONTAINER_NAME} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
    networks:
      - service-network
  pgadmin:
    image: dpage/pgadmin4:8.13
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_LOCAL_PORT}:${PGADMIN_CONTAINER_PORT}"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - service-network

volumes:
  pgdata:
  pgadmin:

networks:
  service-network:
    driver: bridge
